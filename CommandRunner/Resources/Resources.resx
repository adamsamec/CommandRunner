<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="commandLabel" xml:space="preserve">
    <value />
  </data>
  <data name="workingDirLabel" xml:space="preserve">
    <value>Working directory</value>
  </data>
  <data name="chooseDirButton" xml:space="preserve">
    <value>Choose directory</value>
  </data>
  <data name="runButton" xml:space="preserve">
    <value>Run</value>
  </data>
  <data name="killButton" xml:space="preserve">
    <value>Kill process</value>
  </data>
  <data name="outputLabel" xml:space="preserve">
    <value>Output</value>
  </data>
  <data name="clearOutputButton" xml:space="preserve">
    <value>Clear output</value>
  </data>
  <data name="copyOutputButton" xml:space="preserve">
    <value>Copy output</value>
  </data>
  <data name="settingsButton" xml:space="preserve">
    <value>Settings and more</value>
  </data>
  <data name="helpButton" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="closeButton" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="settingsDialogTitle" xml:space="preserve">
    <value>Settings and more</value>
  </data>
  <data name="checkForUpdateOnLaunchCheckBox" xml:space="preserve">
    <value>Automatically check for update on launch</value>
  </data>
  <data name="checkForUpdateButton" xml:space="preserve">
    <value>Check for update</value>
  </data>
  <data name="playSuccessSoundCheckBox" xml:space="preserve">
    <value>Play success sound when regular expression matches</value>
  </data>
  <data name="successRegexLabel" xml:space="preserve">
    <value>Success regular expression</value>
  </data>
  <data name="playErrorSoundCheckBox" xml:space="preserve">
    <value>Play error sound when regular expression matches</value>
  </data>
  <data name="errorRegexLabel" xml:space="preserve">
    <value>Error regular expression</value>
  </data>
  <data name="findTextDialogTitle" xml:space="preserve">
    <value>Find text</value>
  </data>
  <data name="findWhatLabel" xml:space="preserve">
    <value>Find what</value>
  </data>
  <data name="findNextButton" xml:space="preserve">
    <value>Find next</value>
  </data>
  <data name="findPreviousButton" xml:space="preserve">
    <value>Find previous</value>
  </data>
  <data name="ignoreCaseCheckBox" xml:space="preserve">
    <value>Ignore case</value>
  </data>
  <data name="cancelButton" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="helpDialogTitle" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="updateAvailableDialogTitle" xml:space="preserve">
    <value>CommandRunner update available</value>
  </data>
  <data name="updateAvailableMessage" xml:space="preserve">
    <value>New CommandRunner version {0} is available. You currently have version {1}. Do you want to download the update and run its installation now?</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="yesButton" type="System.Resources.ResXNullRef, System.Windows.Forms">
    <value />
  </data>
  <data name="notNowButton" xml:space="preserve">
    <value>Not now</value>
  </data>
  <data name="whatsNewButton" xml:space="preserve">
    <value>What's new</value>
  </data>
  <data name="whatsNewDialogTitle" xml:space="preserve">
    <value>What's new in CommandRunner</value>
  </data>
  <data name="changeLogRetrievalFailedMessage" xml:space="preserve">
    <value>What's new page load was not successful. Please verify that you are connected to the Internet.</value>
  </data>
  <data name="noUpdateAvailableDialogTitle" xml:space="preserve">
    <value>No update available</value>
  </data>
  <data name="noUpdateAvailableMessage" xml:space="preserve">
    <value>Your version of CommandRunner {0} is up to date.</value>
  </data>
  <data name="updateCheckFailedDialogTitle" xml:space="preserve">
    <value>Check for update failed</value>
  </data>
  <data name="updateCheckFailedMessage" xml:space="preserve">
    <value>Check for update was not successful. Please verify that you are connected to the Internet.</value>
  </data>
  <data name="downloadingUpdateDialogTitle" xml:space="preserve">
    <value>Downloading update</value>
  </data>
  <data name="downloadingUpdateMessage" xml:space="preserve">
    <value>Please wait while CommandRunner update {0} is beeing downloaded.</value>
  </data>
  <data name="updateDownloadProgressLabel" xml:space="preserve">
    <value>Downloading update</value>
  </data>
  <data name="updateDownloadFailedDialogTitle" xml:space="preserve">
    <value>Update download failed</value>
  </data>
  <data name="updateDownloadFailedMessage" xml:space="preserve">
    <value>Update download was not successful. Please verify that you are connected to the Internet.</value>
  </data>
  <data name="updateDownloadInProgressDialogTitle" xml:space="preserve">
    <value>Update download in progress</value>
  </data>
  <data name="updateDownloadInProgressMessage" xml:space="preserve">
    <value>The update is being downloaded. Do you want to cancel the download?</value>
  </data>
  <data name="cancelUpdateDownloadButton" xml:space="preserve">
    <value />
  </data>
  <data name="continueUpdateDownloadButton" xml:space="preserve">
    <value>Continue download</value>
  </data>
  <data name="updateInstallRunningDialogTitle" xml:space="preserve">
    <value>Update installer is running</value>
  </data>
  <data name="updateInstallRunningMessage" xml:space="preserve">
    <value>The update installer is running. Please finish or cancel the installation before downloading the update again.</value>
  </data>
  <data name="launchUpdateInstallerDialogTitle" xml:space="preserve">
    <value>Launch update installer</value>
  </data>
  <data name="launchUpdateInstallerMessage" xml:space="preserve">
    <value>Update installer has been downloaded. Do you want to launch it?</value>
  </data>
  <data name="launchUpdateInstallerButton" xml:space="preserve">
    <value>Launch installer</value>
  </data>
  <data name="ZZZ" type="System.Resources.ResXNullRef, System.Windows.Forms">
    <value />
  </data>
  <data name="ZZXX" xml:space="preserve">
    <value>ZZ</value>
  </data>
</root>